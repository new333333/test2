<?xml version="1.0"?>

<project name="ssfs" basedir="." default="war">
	<import file="../build-common.xml" />
    <import file="../deploy-support.xml" />
	
	<property name="jar.file" value="kablink-teaming-ssfs.jar" />

	<property name="slide.war.file" value="slide.war" />
	<property name="output.war.name" value="ssfs" />
	<property name="output.war.file" value="${output.war.name}.war" />
	<property name="temp.dir" value="temp" />
	<property name="libraries.duplicate.excludes" value="kablink*.jar,novell*.jar,*slide*.jar,commons-transaction-*.jar,commons-xmlio-*.jar,poi-*.jar" />

	<target name="delete-temp">
		<delete includeemptydirs="true" dir="${temp.dir}" failonerror="true"/>
	</target>
	
	<target name="clean" depends="build-common.clean, delete-temp">
		<delete>
			<fileset dir="." includes="${output.war.file}" />
		</delete>
	</target>
		
	<target name="jar" depends="compile,build-common.jar">
		<jar 
			jarfile="${jar.file}"
			update="true"
		>
			<fileset dir="${basedir}/../main-minimum/classes">
				<include name="org/kablink/teaming/spring/web/util/Log4jConfigListener.class"/>
			</fileset>
		</jar>
		<jar 
			jarfile="${jar.file}"
			update="true"
		>
			<fileset dir="${basedir}/../main/classes">
	        	<include name="org/kablink/teaming/ssfs/CrossContextConstants.class"/>
				<include name="org/kablink/teaming/ssfs/AlreadyExistsException.class"/>
				<include name="org/kablink/teaming/ssfs/NoAccessException.class"/>
				<include name="org/kablink/teaming/ssfs/NoSuchObjectException.class"/>
				<include name="org/kablink/teaming/ssfs/LockException.class"/>
				<include name="org/kablink/teaming/ssfs/TypeMismatchException.class"/>
				<include name="org/kablink/teaming/ssfs/ZoneMismatchException.class"/>
	        	<include name="org/kablink/teaming/web/util/AttributesAndParamsOnlyServletRequest.class"/>
	        	<include name="org/kablink/teaming/web/util/NullServletResponse.class"/>
			</fileset>
		</jar>
		<jar 
			jarfile="${jar.file}"
			update="true"
		>
			<fileset dir="${basedir}/../util/classes">
	        	<include name="org/kablink/util/ServerDetector.class"/>
			</fileset>
		</jar>
		<antcall target="jar-manifest">
			<param name="jar-manifest.jar.file" value="${jar.file}"/>
		</antcall>
	</target>

	<target name="unwar-patched-slide-war" depends="delete-temp">		
		<unwar src="resources/${slide.war.file}" dest="${temp.dir}"/>
	</target>
	
	<target name="apply-changes" depends="jar,unwar-patched-slide-war">
		<!-- The following archives and files are not needed by SSFS. -->
		<delete failonerror="true">
			<fileset dir="${temp.dir}/WEB-INF/lib">
				<include name="ant.jar"/>
				<include name="commons-dbcp*.jar"/>
				<include name="commons-httpclient.jar"/>
				<include name="db-ojb*.jar"/>
				<include name="jakarta-slide-webdavlib*.jar"/>
				<include name="lucene*.jar"/>
				<include name="PDFBox*.jar"/>
				<include name="tm-extractors*.jar"/>
				<include name="tm-extractors.notice"/>
			</fileset>
		</delete>
		<delete file="${temp.dir}/WEB-INF/classes/log4j.properties"/>
		<copy todir="${temp.dir}" overwrite="true">
 			<fileset dir="resources/slide-war" />
		</copy>
		<copy file="${jar.file}" todir="${temp.dir}/WEB-INF/lib" />
		<copy file="${basedir}/../lib/spring.jar" todir="${temp.dir}/WEB-INF/lib" />
		<copy file="${basedir}/../lib/spring-security-core.jar" todir="${temp.dir}/WEB-INF/lib" />
	</target>
	
	<target name="war" depends="apply-changes">		
		<war
			basedir="${temp.dir}"
			destfile="${output.war.file}"
			webxml="${temp.dir}/WEB-INF/web.xml"
			update="false"
		/>
	</target>
	
	<target name="build"  depends="war"/>

    <target name="deploy">
        <antcall target="deploy-war">
        	<param name="deploy-support.war.name" value="${output.war.name}" />
        </antcall>
		<if>
			<equals arg1="${app.server.type}" arg2="tomcat" />
			<then>
				<!-- On Tomcat, Liferay's archives are deployed in common directory.
				     Delete the following jar files from ssfs so that it uses the
				     ones deployed with Liferay. Otherwise, it becomes problematic. -->
				<!-- With 4.1.2, Liferay's archives are no longer deployed in the 
				     server's common area. So we no longer need to delete the 
				     following archives. -->
				<!--<delete>
					<fileset dir="${app.server.ssfs.dir}/WEB-INF/lib">
						<include name="commons-logging-*.jar"/>
						<include name="log4j-*.jar"/>
					</fileset>
				</delete>-->
				<property name="ssfs.app.dir" value="ssfs"/>
			</then>
		</if>
    	<antcall target="delete-duplicate-libraries"/>
    </target>

	<!-- There are a set of 3rd party libraries that are common between ssf and ssfs web apps.
	     Since ssf deploys its 3rd party libraries in the shared area of the app server,
	     we need to remove those libraries from the ssf lib directory so that it uses the
	     ones deployed with ssf. Otherwise, it becomes real problematic. -->
	<target name="delete-duplicate-libraries">
		<delete>
			<fileset dir="${app.server.ssfs.dir}/WEB-INF/lib" excludes="${libraries.duplicate.excludes}"/>
		</delete>
		<delete dir="${app.server.ssfs.dir}/WEB-INF/lib/local"/>
	</target>
	
</project>