<?xml version="1.0"?>

<project name="ssfs" basedir="." default="war">
	<import file="../build-common.xml" />
    <import file="../deploy-support.xml" />
	
	<property name="jar.file" value="ssf-ssfs.jar" />

	<property name="slide.war.file" value="slide.war" />
	<property name="output.war.name" value="ssfs" />
	<property name="output.war.file" value="${output.war.name}.war" />
	<property name="temp.dir" value="temp" />
	<property name="temp.slide.dir" value="temp-slide" />

	<target name="delete-temp">
		<delete includeemptydirs="true" dir="${temp.dir}" failonerror="true"/>
	</target>
	
	<target name="delete-temp-slide">
		<delete includeemptydirs="true" dir="${temp.slide.dir}" failonerror="true"/>
	</target>
	
	<target name="clean" depends="build-common.clean, delete-temp, delete-temp-slide">
		<delete>
			<fileset dir="." includes="${output.war.file}" />
		</delete>
	</target>
		
	<target name="jar" depends="compile,build-common.jar">
		<jar 
			jarfile="${jar.file}"
			update="true"
		>
			<fileset dir="${basedir}/../main/classes">
	        	<include name="com/sitescape/ef/ssfs/CrossContextConstants.class"/>
				<include name="com/sitescape/ef/ssfs/AlreadyExistsException.class"/>
				<include name="com/sitescape/ef/ssfs/NoAccessException.class"/>
				<include name="com/sitescape/ef/ssfs/NoSuchObjectException.class"/>
				<include name="com/sitescape/ef/ssfs/LockException.class"/>
	        	<include name="com/sitescape/ef/web/util/AttributesAndParamsOnlyServletRequest.class"/>
	        	<include name="com/sitescape/ef/web/util/NullServletResponse.class"/>
			</fileset>
		</jar>
	</target>

	<target name="unwar-original" depends="delete-temp">		
		<unwar src="resources/${slide.war.file}" dest="${temp.dir}"/>
	</target>
	
	<target name="apply-changes" depends="jar,unwar-original">
		<!-- The following archives and files are not needed by SSFS. -->
		<delete failonerror="true">
			<fileset dir="${temp.dir}/WEB-INF/lib">
				<include name="ant.jar"/>
				<include name="commons-dbcp*.jar"/>
				<include name="commons-httpclient.jar"/>
				<include name="db-ojb*.jar"/>
				<include name="jakarta-slide-webdavlib*.jar"/>
				<include name="lucene*.jar"/>
				<include name="PDFBox*.jar"/>
				<include name="tm-extractors*.jar"/>
				<include name="tm-extractors.notice"/>
			</fileset>
		</delete>
		<copy todir="${temp.dir}" overwrite="true">
			<fileset dir="resources/slide-war" includes="**/*" />
		</copy>
		<copy file="${jar.file}" todir="${temp.dir}/WEB-INF/lib" />
	</target>
	
	<target name="war" depends="apply-changes">		
		<war
			basedir="${temp.dir}"
			destfile="${output.war.file}"
			webxml="${temp.dir}/WEB-INF/web.xml"
			update="false"
		/>
	</target>
	
    <target name="deploy" depends="war">
        <antcall target="deploy-war">
        	<param name="deploy-support.war.name" value="${output.war.name}" />
        </antcall>
		<if>
			<equals arg1="${app.server.type}" arg2="tomcat" />
			<then>
				<!-- On Tomcat, Liferay's archives are deployed in common directory.
				     Delete the following jar files from ssfs so that it uses the
				     ones deployed with Liferay. Otherwise, it becomes problematic. -->
				<delete>
					<fileset dir="${app.server.ssfs.dir}/WEB-INF/lib">
						<include name="commons-logging-*.jar"/>
						<include name="log4j-*.jar"/>
					</fileset>
				</delete>
			</then>
			<elseif>
				<equals arg1="${app.server.type}" arg2="jboss-tomcat" />
				<then>
					<!-- JBoss does not allow applications to load their own commons logging classes. 
					     They must use the shared one that JBoss already has. -->
					<delete>
						<fileset dir="${app.server.deploy.dir}/ssfs.war/WEB-INF/lib" includes="commons-logging*.jar"/>
					</delete>		
				</then>
			</elseif>
		</if>
    </target>

	<!-- Build ssfs.war from scratch by first re-building slide.war (which
	     ssfs.war is based on) from its source pool. This is necessary only 
	     when slide.war has changed, which should be very rare. In all other
	     cases, simply use "war" which is significantly more efficient. -->
	<target name="build-war-from-scratch">
		<antcall target="build-custom-slide-war"/>
		<antcall target="war"/>
	</target>

	<!-- Build custom slide.war file from its source pool in conjunction with
	     the modifications we made to some of the source code. -->
	<target name="build-custom-slide-war" depends="delete-temp-slide">
		<unzip src="download/${slide.src.zip.file.name}" dest="${temp.slide.dir}" />
		<copy todir="${temp.slide.dir}" overwrite="true">
			<fileset dir="resources/slide-src" />
		</copy>
		<copy file="resources/slide-src/wck/build.properties.sample" tofile="${temp.slide.dir}/wck/build.properties" overwrite="true" />
		<ant dir="${temp.slide.dir}/wck" target="dist" inheritAll="false" />
		<copy file="${temp.slide.dir}/wck/dist/slide.war" todir="resources" />
		<!-- The following jar files are copied into our lib directory because they are
		     needed to compile the Java source files in com.sitescape.ef.ssfs.* packages.
		     (the first two jar files also contain some changes we made to customize Slide). -->
		<!-- NOTE: Instead of copying these generated jar files into lib directory at build
		           time, we checked them into SCM for two reasons: 1) dealing with archives
		           in SCM is easier for developers (as opposed to two-pass build), 
		           2) these jar files will not change frequently. -->
		<!--<copy file="${temp.slide.dir}/wck/dist/jakarta-slide-wck-1.0.jar" tofile="${project.dir}/lib/jakarta-slide-wck.jar" />-->
		<!--<copy file="${temp.slide.dir}/wck/dist/slide-kernel-2.2pre1.jar" todir="${project.dir}/lib/slide-kernel.jar" />-->
		<!--<copy file="${temp.slide.dir}/dist/slide/lib/slide-jaas-2.2pre1.jar" todir="${project.dir}/lib/slide-jaas.jar" />-->
	</target>
</project>