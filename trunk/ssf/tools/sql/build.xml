<?xml version="1.0"?>

<project name="sql" basedir="." default="">

	<target name="init">
		<echo message="##### SQL #####" />
		<property environment="env" />
  		<property name="project.dir" value="../.." />
  		<property file="${project.dir}/build.${user.name}.properties" />
  		<property file="${project.dir}/build.properties" />
  		<property file="${basedir}/database.${user.name}.properties" />
  		<property file="${basedir}/database.properties" />
		<path id="project.classpath">
			<pathelement path="${classpath}" />
			<fileset dir="${project.dir}/lib" includes="*.jar" />
		</path>
  		<property name="main.project.dir" value="${project.dir}/main" />
  		<property name="main.classes.dir" value="${main.project.dir}/${classes.dir}" />
  		<property name="create.dir" value="${basedir}/create" />
		<taskdef resource="net/sf/antcontrib/antcontrib.properties">
			<classpath>
				<pathelement location="${project.dir}/lib/ant-contrib.jar" />
			</classpath>
		</taskdef>
		<taskdef name="dbunit"
		    classname="org.dbunit.ant.DbUnitTask">
			<classpath>
				<fileset dir="${project.dir}/lib" includes="*.jar" />
			</classpath>
		</taskdef>
	</target>

  	<target name="generate-create-script" depends="init" 
  		description="Generate sql script used for creating tables in sitescape database.">
		<path id="initpath">
  			<pathelement location="${main.classes.dir}"/>
			<fileset dir="${project.dir}/util" includes="*.jar"/>
			<fileset dir="${project.dir}/lib" includes="*.jar" />
		</path>
        <taskdef classname="org.hibernate.tool.hbm2ddl.SchemaExportTask"
	             classpathref="initpath" name="schemaexport">
 		</taskdef> 

	    <schemaexport delimiter=";" output="${create.dir}/create-tables-${database.type}.sql"
	    	properties="${basedir}/hibernate-${database.type}.properties" 
	          	quiet="false" text="true">
	    	<fileset dir="${main.classes.dir}" >
	    		<include name="com/sitescape/ef/**/*hbm.xml"/>
	            <include name="com/sitescape/ef/security/**/*hbm.xml"/>
	        </fileset>
	     </schemaexport>
    </target>

	<target name="generate-all-create-scripts" depends="init">
		<antcall target="generate-create-script-db2" inheritAll="false"/>
		<antcall target="generate-create-script-mysql" inheritAll="false"/>
		<antcall target="generate-create-script-oracle" inheritAll="false"/>
		<antcall target="generate-create-script-postgresql" inheritAll="false"/>
		<antcall target="generate-create-script-sql-server" inheritAll="false"/>
	</target>
	
	<target name="generate-create-script-db2" depends="init">
		<move file="${basedir}/database.${user.name}.properties" tofile="${basedir}/database.${user.name}.properties.moved" failonerror="false"/>
		<echo file="${basedir}/database.${user.name}.properties">database.type=db2</echo>
		<antcall target="generate-create-script"/>
		<delete file="${basedir}/database.${user.name}.properties" failonerror="false"/>
		<move file="${basedir}/database.${user.name}.properties.moved" tofile="${basedir}/database.${user.name}.properties" failonerror="false"/>
	</target>
	
	<target name="generate-create-script-mysql" depends="init">
		<move file="${basedir}/database.${user.name}.properties" tofile="${basedir}/database.${user.name}.properties.moved" failonerror="false"/>
		<echo file="${basedir}/database.${user.name}.properties">database.type=mysql</echo>
		<antcall target="generate-create-script"/>
		<delete file="${basedir}/database.${user.name}.properties" failonerror="false"/>
		<move file="${basedir}/database.${user.name}.properties.moved" tofile="${basedir}/database.${user.name}.properties" failonerror="false"/>
	</target>
	
	<target name="generate-create-script-oracle" depends="init">
		<move file="${basedir}/database.${user.name}.properties" tofile="${basedir}/database.${user.name}.properties.moved" failonerror="false"/>
		<echo file="${basedir}/database.${user.name}.properties">database.type=oracle</echo>
		<antcall target="generate-create-script"/>
		<delete file="${basedir}/database.${user.name}.properties" failonerror="false"/>
		<move file="${basedir}/database.${user.name}.properties.moved" tofile="${basedir}/database.${user.name}.properties" failonerror="false"/>
	</target>
	
	<target name="generate-create-script-postgresql" depends="init">
		<move file="${basedir}/database.${user.name}.properties" tofile="${basedir}/database.${user.name}.properties.moved" failonerror="false"/>
		<echo file="${basedir}/database.${user.name}.properties">database.type=postgresql</echo>
		<antcall target="generate-create-script"/>
		<delete file="${basedir}/database.${user.name}.properties" failonerror="false"/>
		<move file="${basedir}/database.${user.name}.properties.moved" tofile="${basedir}/database.${user.name}.properties" failonerror="false"/>
	</target>
			
	<target name="generate-create-script-sql-server" depends="init">
		<move file="${basedir}/database.${user.name}.properties" tofile="${basedir}/database.${user.name}.properties.moved" failonerror="false"/>
		<echo file="${basedir}/database.${user.name}.properties">database.type=sql-server</echo>
		<antcall target="generate-create-script"/>
		<delete file="${basedir}/database.${user.name}.properties" failonerror="false"/>
		<move file="${basedir}/database.${user.name}.properties.moved" tofile="${basedir}/database.${user.name}.properties" failonerror="false"/>
	</target>
	
	<target name="execute-create-script" depends="init" 
		description="Execute sql script that creates tables in sitescape database.">
		<antcall target="execute-script">
			<param name="jdbc.properties" value="${basedir}/jdbc-${database.type}.properties"/>
			<param name="sql.script" value="${basedir}/create/create-tables-${database.type}.sql"/>
		</antcall>
	</target>
	
	<target name="execute-script" depends="init" description="Execute a sql script.">
  		<property file="${jdbc.properties}" />
		<sql driver="${jdbc.driver}"
			url="${jdbc.url}"
			userid="${jdbc.username}"
			password="${jdbc.password}"
			onerror="continue"
			src="${sql.script}">
			<classpath refid="project.classpath"/>
		</sql>
	</target>
	
	<target name="execute-test-script" depends="init" 
		description="Execute test script that creates tables in test SQLSERVER database">
		<antcall target="execute-script">
			<param name="jdbc.properties" value="${basedir}/test/test-jdbc-sql-server.properties"/>
			<param name="sql.script" value="${basedir}/test/test-create-tables-sql-server.sql"/>
		</antcall>
	</target>
	
	<target name="load-data" depends="init">
  		<property file="${jdbc.properties}" />
		<!-- This performs clean-insert metning that it empties the table
		     before inserting the records. -->
		<dbunit driver="${jdbc.driver}"
			url="${jdbc.url}"
			userid="${jdbc.username}"
			password="${jdbc.password}">
			<operation type="MSSQL_CLEAN_INSERT"
				src="${data.input.file}"
				format="flat"/>
		</dbunit>
	</target>
	
	<target name="load-test-data" depends="init"
		description="Load test data into test SQLSERVER database">
		<antcall target="load-data">
			<param name="jdbc.properties" value="${basedir}/test/test-jdbc-sql-server.properties"/>
			<param name="data.input.file" value="${basedir}/test/test-data.xml"/>
		</antcall>
	</target>
	
	<target name="load-development-minimum-data" depends="init"
		description="Load minimum development data into SITESCAPE database">
		<antcall target="load-data">
			<param name="jdbc.properties" value="${basedir}/jdbc-sql-server.properties"/>
			<param name="data.input.file" value="${basedir}/data/development-minimum.xml"/>
		</antcall>
	</target>
	
	<target name="load-development-data" depends="init"
		description="Load development data into SITESCAPE database">
		<antcall target="load-data">
			<param name="jdbc.properties" value="${basedir}/jdbc-sql-server.properties"/>
			<param name="data.input.file" value="${basedir}/data/development-export.xml"/>
		</antcall>
	</target>
	
	<target name="export-data" depends="init">
  		<property file="${jdbc.properties}" />
		<dbunit driver="${jdbc.driver}"
			url="${jdbc.url}"
			userid="${jdbc.username}"
			password="${jdbc.password}">
			<export dest="${data.output.file}"
				format="flat">
				<table name="Employees"/>
			</export>
		</dbunit>
	</target>
	
	<target name="export-test-data" depends="init"
		description="Export test SQLSERVER database into a file">
  		<property file="${basedir}/test/test-jdbc-sql-server.properties" />
		<dbunit driver="${jdbc.driver}"
			url="${jdbc.url}"
			userid="${jdbc.username}"
			password="${jdbc.password}">
			<export dest="${basedir}/test/test-export.xml"
				format="flat">
				<table name="Employees"/>
			</export>
		</dbunit>
	</target>
	
	<target name="export-development-data" depends="init"
		description="Export SITESCAPE database (SS_* tables only) into a file">
  		<property file="${basedir}/jdbc-sql-server.properties" />
		<dbunit driver="${jdbc.driver}"
			url="${jdbc.url}"
			userid="${jdbc.username}"
			password="${jdbc.password}">
			<export dest="${basedir}/data/development-export.xml"
				format="flat">
				<table name="SS_AssignmentsMap"/>
				<table name="SS_Attachments"/>
				<table name="SS_CustomAttributes"/>
				<table name="SS_DefinitionMap"/>
				<table name="SS_EmailAlias"/>
				<table name="SS_Events"/>
				<table name="SS_FolderCounts"/>
				<table name="SS_FolderEntries"/>
				<table name="SS_Forums"/>
				<table name="SS_FunctionOperations"/>
				<table name="SS_Functions"/>
				<table name="SS_HistoryMap"/>
				<table name="SS_Notifications"/>
				<table name="SS_Postings"/>
				<table name="SS_PrincipalMembership"/>
				<table name="SS_Principals"/>
				<table name="SS_SeenMap"/>
				<table name="SS_UserProperties"/>
				<table name="SS_WorkareaFunctionMembers"/>
				<table name="SS_WorkAreaFunctionMemberships"/>
				<table name="SS_WorkflowStates"/>
			</export>
		</dbunit>
	</target>
	
</project>