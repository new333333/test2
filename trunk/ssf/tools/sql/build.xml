<?xml version="1.0"?>
<project name="sql" basedir="." default="">
	<property name="project.dir" value="../.." />

	<import file="${project.dir}/build-common.xml"/>
	
	<property name="main.project.dir" value="${project.dir}/main" />
	<property name="main.classes.dir" value="${main.project.dir}/${classes.dir}" />
	<property name="main.hibernate.dir" value="${main.project.dir}/hibernate" />
	<property name="create.dir" value="${basedir}/create" />

	<taskdef name="dbunit"
	    classname="org.dbunit.ant.DbUnitTask">
		<classpath>
			<fileset dir="${project.dir}/lib" includes="*.jar" />
		</classpath>
	</taskdef>

	<!--<target name="init-build">
		<property file="${basedir}/build.${user.name}.properties" />
		<property file="${basedir}/build.properties" />
	</target>-->
	
	<target name="init-database-type">
		<property file="${project.dir}/tools/sql/database.${user.name}.properties" />
		<property file="${project.dir}/tools/sql/database.properties" />
	</target>
	
  	<target name="generate-create-tables-script" depends="init-database-type"
  		description="Generate sql script used for creating tables in sitescape database.">
		<path id="initpath">
  			<pathelement location="${main.classes.dir}"/>
			<fileset dir="${project.dir}/util" includes="*.jar"/>
			<fileset dir="${project.dir}/lib" includes="*.jar" />
		</path>
        <taskdef classname="org.hibernate.tool.hbm2ddl.SchemaExportTask"
	             classpathref="initpath" name="schemaexport">
 		</taskdef> 

  		<mkdir dir="${create.dir}"/>
  		
	    <schemaexport delimiter=";" output="${create.dir}/create-tables-core-${database.type}.sql"
	    	properties="${basedir}/hibernate-${database.type}.properties" 
	          	quiet="false" text="true">
	    	<fileset dir="${main.hibernate.dir}" >
	    		<include name="com/sitescape/ef/**/*hbm.xml"/>
	        </fileset>
	     </schemaexport>
	    <schemaexport delimiter=";" output="${create.dir}/create-tables-jbpm-${database.type}.sql"
	    	properties="${basedir}/hibernate-${database.type}.properties" 
	          	quiet="false" text="true">
			<fileset dir="${project.dir}/lib" includes="jbpm.jar" >
	    		<include name="org/jbpm/**/*hbm.xml"/>
	        </fileset>
			<fileset dir="${project.dir}/lib" includes="jbpm-identity.jar" >
	    		<include name="org/jbpm/**/*hbm.xml"/>
	        </fileset>
	     </schemaexport>
		<copy file="../quartz_tables_${database.type}.sql" 
			tofile="${create.dir}/create-tables-quartz-${database.type}.sql"
			overwrite="true" />

  		<!-- Make sure to compile the Java code we're about to run. -->
  		<ant dir=".." target="compile" inheritAll="false" />
  		
  		<java
  			classname="com.sitescape.ef.tools.sql.GenerateCreateTablesUnconstrained"
  			classpathref="project.classpath"
  			fork="true"
  			dir="${basedir}"
  			failonerror="true">
  			<arg value="${create.dir}/create-tables-core-${database.type}.sql" />
  		</java>
 		<java
  			classname="com.sitescape.ef.tools.sql.GenerateCreateTablesUnconstrained"
  			classpathref="project.classpath"
  			fork="true"
  			dir="${basedir}"
  			failonerror="true">
  			<arg value="${create.dir}/create-tables-jbpm-${database.type}.sql" />
 			<arg value="append"/>
  		</java>
 		<java
  			classname="com.sitescape.ef.tools.sql.GenerateCreateTablesUnconstrained"
  			classpathref="project.classpath"
  			fork="true"
  			dir="${basedir}"
  			failonerror="true">
  			<arg value="${create.dir}/create-tables-quartz-${database.type}.sql" />
 			<arg value="append"/>
  		</java>
	  	<concat destfile="${create.dir}/create-tables-${database.type}.sql">
	  	    <fileset dir="${create.dir}"
	  	         includes="create-tables-*-${database.type}.sql" />
	  	</concat>
    </target>

	<!-- Generate SQL scripts used for creating SS tables and constraints
		 for each supported database. These scripts are generated from the 
		 Hibernate mapping files. -->
	<target name="generate-all-create-scripts">
		<antcall target="generate-create-tables-script-db2" inheritAll="false"/>
		<antcall target="generate-create-tables-script-mysql" inheritAll="false"/>
		<antcall target="generate-create-tables-script-oracle" inheritAll="false"/>
		<antcall target="generate-create-tables-script-postgresql" inheritAll="false"/>
		<antcall target="generate-create-tables-script-sqlserver" inheritAll="false"/>
	</target>
	
	<target name="generate-create-tables-script-db2">
		<move file="${basedir}/database.${user.name}.properties" tofile="${basedir}/database.${user.name}.properties.moved" failonerror="false"/>
		<echo file="${basedir}/database.${user.name}.properties">database.type=db2</echo>
		<antcall target="generate-create-tables-script"/>
		<delete file="${basedir}/database.${user.name}.properties" failonerror="false"/>
		<move file="${basedir}/database.${user.name}.properties.moved" tofile="${basedir}/database.${user.name}.properties" failonerror="false"/>
	</target>
	
	<target name="generate-create-tables-script-mysql">
		<move file="${basedir}/database.${user.name}.properties" tofile="${basedir}/database.${user.name}.properties.moved" failonerror="false"/>
		<echo file="${basedir}/database.${user.name}.properties">database.type=mysql</echo>
		<antcall target="generate-create-tables-script"/>
		<delete file="${basedir}/database.${user.name}.properties" failonerror="false"/>
		<move file="${basedir}/database.${user.name}.properties.moved" tofile="${basedir}/database.${user.name}.properties" failonerror="false"/>
	</target>
	
	<target name="generate-create-tables-script-oracle">
		<move file="${basedir}/database.${user.name}.properties" tofile="${basedir}/database.${user.name}.properties.moved" failonerror="false"/>
		<echo file="${basedir}/database.${user.name}.properties">database.type=oracle</echo>
		<antcall target="generate-create-tables-script"/>
		<delete file="${basedir}/database.${user.name}.properties" failonerror="false"/>
		<move file="${basedir}/database.${user.name}.properties.moved" tofile="${basedir}/database.${user.name}.properties" failonerror="false"/>
	</target>
	
	<target name="generate-create-tables-script-postgresql">
		<move file="${basedir}/database.${user.name}.properties" tofile="${basedir}/database.${user.name}.properties.moved" failonerror="false"/>
		<echo file="${basedir}/database.${user.name}.properties">database.type=postgresql</echo>
		<antcall target="generate-create-tables-script"/>
		<delete file="${basedir}/database.${user.name}.properties" failonerror="false"/>
		<move file="${basedir}/database.${user.name}.properties.moved" tofile="${basedir}/database.${user.name}.properties" failonerror="false"/>
	</target>
			
	<target name="generate-create-tables-script-sqlserver">
		<move file="${basedir}/database.${user.name}.properties" tofile="${basedir}/database.${user.name}.properties.moved" failonerror="false"/>
		<echo file="${basedir}/database.${user.name}.properties">database.type=sqlserver</echo>
		<antcall target="generate-create-tables-script"/>
		<delete file="${basedir}/database.${user.name}.properties" failonerror="false"/>
		<move file="${basedir}/database.${user.name}.properties.moved" tofile="${basedir}/database.${user.name}.properties" failonerror="false"/>
	</target>
	
	<target name="execute-create-tables-script" depends="init-database-type"
		description="Execute sql script that creates tables in sitescape database.">
		<antcall target="execute-script">
			<param name="jdbc.properties" value="${basedir}/jdbc-${database.type}.properties"/>
			<param name="sql.script" value="${basedir}/create/create-tables-${database.type}.sql"/>
		</antcall>
	</target>
	
	<target name="execute-create-unconstrained-script" depends="init-database-type"
		description="Execute sql script that creates unconstrained tables in sitescape database.">
		<antcall target="execute-script">
			<param name="jdbc.properties" value="${basedir}/jdbc-${database.type}.properties"/>
			<param name="sql.script" value="${basedir}/create/create-unconstrained-tables-${database.type}.sql"/>
		</antcall>
	</target>
	
	<target name="execute-add-constraints-script" depends="init-database-type"
		description="Execute sql script that adds constraints to tables in sitescape database.">
		<antcall target="execute-script">
			<param name="jdbc.properties" value="${basedir}/jdbc-${database.type}.properties"/>
			<param name="sql.script" value="${basedir}/create/add-constraints-${database.type}.sql"/>
		</antcall>
	</target>
	
	<!-- Only called by other targets (like subroutines) -->
	<target name="execute-script" description="Execute a sql script.">
  		<property file="${jdbc.properties}" />
		<sql driver="${jdbc.driver}"
			url="${jdbc.url}"
			userid="${jdbc.username}"
			password="${jdbc.password}"
			onerror="continue"
			src="${sql.script}">
			<classpath refid="project.classpath"/>
		</sql>
	</target>
	
	<target name="execute-test-create-tables-script"  
		description="Execute test script that creates tables in test SQLSERVER database">
		<antcall target="execute-script">
			<param name="jdbc.properties" value="${basedir}/test/test-jdbc-sqlserver.properties"/>
			<param name="sql.script" value="${basedir}/test/test-create-tables-sqlserver.sql"/>
		</antcall>
	</target>
	
	<!-- Only called by other targets (like subroutines) -->
	<target name="load-data">
  		<property file="${jdbc.properties}" />
		<!-- This performs clean-insert meaning that it empties the table
		     before inserting the records. -->
		<dbunit driver="${jdbc.driver}"
			url="${jdbc.url}"
			userid="${jdbc.username}"
			password="${jdbc.password}">
			<operation type="MSSQL_CLEAN_INSERT"
				src="${data.input.file}"
				format="flat"/>
		</dbunit>
	</target>
	
	<target name="load-test-data"
		description="Load test data into test SQLSERVER database">
		<antcall target="load-data">
			<param name="jdbc.properties" value="${basedir}/test/test-jdbc-sqlserver.properties"/>
			<param name="data.input.file" value="${basedir}/test/test-data-flat.xml"/>
		</antcall>
	</target>
	
	<target name="load-development-minimum-data"
		description="Load minimum development data into sitescape SQLSERVER database">
		<antcall target="load-data">
			<param name="jdbc.properties" value="${basedir}/jdbc-sqlserver.properties"/>
			<param name="data.input.file" value="${basedir}/data/development-minimum-data-flat.xml"/>
		</antcall>
	</target>
	
	<target name="load-development-data"
		description="Load development data into sitescape SQLSERVER database">
		<antcall target="load-data">
			<param name="jdbc.properties" value="${basedir}/jdbc-sqlserver.properties"/>
			<param name="data.input.file" value="${basedir}/data/development-data-flat.xml"/>
		</antcall>
	</target>
	
	<target name="export-test-data"
		description="Export test SQLSERVER database into a file">
  		<property file="${basedir}/test/test-jdbc-sqlserver.properties" />
		<dbunit driver="${jdbc.driver}"
			url="${jdbc.url}"
			userid="${jdbc.username}"
			password="${jdbc.password}">
			<export dest="${basedir}/test/test-data-dtd.xml"
				doctype="test-data-dtd.xml"
				format="dtd">
				<table name="Employees"/>
			</export>
		</dbunit>
		<dbunit driver="${jdbc.driver}"
			url="${jdbc.url}"
			userid="${jdbc.username}"
			password="${jdbc.password}">
			<export dest="${basedir}/test/test-data-flat.xml"
				doctype="test-data-dtd.xml"
				format="flat">
				<table name="Employees"/>
			</export>
		</dbunit>
	</target>
	
	<!-- Only called by other targets (like subroutines) -->
	<target name="export-data">
  		<property file="${basedir}/jdbc-sqlserver.properties" />
		<dbunit driver="${jdbc.driver}"
			url="${jdbc.url}"
			userid="${jdbc.username}"
			password="${jdbc.password}">
			<export dest="${basedir}/data/${type}-data-${format}.xml"
				doctype="${type}-data-dtd.xml"
				format="${format}">
				<table name="SS_Attachments"/>
				<table name="SS_CustomAttributes"/>
				<table name="SS_DefinitionMap"/>
				<table name="SS_Definitions"/>
				<table name="SS_EmailAlias"/>
				<table name="SS_Events"/>
				<table name="SS_FolderEntries"/>
				<table name="SS_Forums"/>
				<table name="SS_FunctionOperations"/>
				<table name="SS_Functions"/>
				<table name="SS_HistoryMap"/>
				<table name="SS_Notifications"/>
				<table name="SS_Postings"/>
				<table name="SS_PrincipalMembership"/>
				<table name="SS_Principals"/>
				<table name="SS_SeenMap"/>
				<table name="SS_Tags"/>
				<table name="SS_UserProperties"/>
				<table name="SS_WorkareaFunctionMembers"/>
				<table name="SS_WorkAreaFunctionMemberships"/>
				<table name="SS_WorkflowMap"/>
				<table name="SS_WorkflowStates"/>
			</export>
		</dbunit>
	</target>
	
	<!-- Export the records from SS tables in sitescape database into a xml file.
	     This data is equivalent roughly to the content generated by j2eeupgrade.tcl
	     script and meant to be used for development purpose only. -->
	<target name="export-development-data"
		description="Export sitescape SQLSERVER database (SS_* tables only) into a file">
		<antcall target="export-data">
			<param name="type" value="development" />
			<param name="format" value="dtd" />
		</antcall>
		<antcall target="export-data">
			<param name="type" value="development" />
			<param name="format" value="flat" />
		</antcall>
	</target>
	
</project>