/**
 * The contents of this file are subject to the Common Public Attribution License Version 1.0 (the "CPAL");
 * you may not use this file except in compliance with the CPAL. You may obtain a copy of the CPAL at
 * http://www.opensource.org/licenses/cpal_1.0. The CPAL is based on the Mozilla Public License Version 1.1
 * but Sections 14 and 15 have been added to cover use of software over a computer network and provide for
 * limited attribution for the Original Developer. In addition, Exhibit A has been modified to be
 * consistent with Exhibit B.
 * 
 * Software distributed under the CPAL is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND,
 * either express or implied. See the CPAL for the specific language governing rights and limitations
 * under the CPAL.
 * 
 * The Original Code is ICEcore. The Original Developer is SiteScape, Inc. All portions of the code
 * written by SiteScape, Inc. are Copyright (c) 1998-2007 SiteScape, Inc. All Rights Reserved.
 * 
 * 
 * Attribution Information
 * Attribution Copyright Notice: Copyright (c) 1998-2007 SiteScape, Inc. All Rights Reserved.
 * Attribution Phrase (not exceeding 10 words): [Powered by ICEcore]
 * Attribution URL: [www.icecore.com]
 * Graphic Image as provided in the Covered Code [web/docroot/images/pics/powered_by_icecore.png].
 * Display of Attribution Information is required in Larger Works which are defined in the CPAL as a
 * work which combines Covered Code or portions thereof with code not governed by the terms of the CPAL.
 * 
 * 
 * SITESCAPE and the SiteScape logo are registered trademarks and ICEcore and the ICEcore logos
 * are trademarks of SiteScape, Inc.
 */
package com.sitescape.team.samples.wsclient;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;

import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.XMLWriter;

/*
 * Exports the workspace tree, including all entries and their attachments, into a tree of Windows folders.
 *  Each binder gets a windows folder, and each entry an XML file with them.  Attachments to entries are
 *  placed in folders next to the entries' XML files, with matching names (prefixed with "Attach-").
 *  During export, timestamps of the "Attributes.xml" and "Completed" files (generated by this process)
 *  are checked to allow interrupted exports to resume (very close to) where they stopped.
 * 
 * Folder and file names are based on the titles of the binder/entry, after a heavy-handed replacement of
 *  all whitespace and punctuation with underscores.  They are prefixed with the ID of the binder/entry,
 *  to help keep them unique (and also as a magic format for WsImport to distinguish between file types).
 *  
 * A new folder is created based on the given hostname and id of the folder being exported.  You can give
 *  a binder ID on the command line - the default is '1', which will export the entire tree.
 */
public class WSExport extends WSClientBase
{
	public static void main(String[] args) {
		WSExport wsExport = new WSExport();
		
		if(args.length > 1) {
			System.err.println("Usage: WSExport [<root binder id>]");
			return;
		}
		Long rootBinderId = new Long(0);
		if(args.length == 1) {
			rootBinderId = Long.valueOf(args[0]);
		}
		try {
			File exportRoot = new File(safeName("export-" + rootBinderId + "-" + wsExport.host));
			exportRoot.mkdir();
			String xml = (String) wsExport.fetch("SearchService", "getWorkspaceTreeAsXML", new Object[] {rootBinderId, new Integer(-1), ""}, null, exportRoot);
			Document document = DocumentHelper.parseText(xml);
			wsExport.createWorkspaceTree(document.getRootElement(), exportRoot);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	void createWorkspaceTree(Element root, File parent)
	throws Exception
	{
		String type = root.attributeValue("type");
		if("workspace".equals(type) || "folder".equals(type)) {
			System.err.println("Processing " + root.attributeValue("title"));
			// Create sub folder and change directory
			File fsFolder = new File(parent, safeName(root));
			fsFolder.mkdir();
			
			// save attributes in special file
			File attributesFile = new File(fsFolder, "Attributes.xml");
			File completionFile = new File(fsFolder, "Completed");
			try {
				if(attributesFile.exists() && completionFile.exists() &&
						completionFile.lastModified() > attributesFile.lastModified()) {
					return;
				}
				attributesFile.createNewFile();
				XMLWriter writer = new XMLWriter(new FileWriter(attributesFile));
				writer.writeOpen(root);
				writer.writeClose(root);
				writer.close();
			} catch(IOException e) {
				System.err.println("Could not write Attributes file for folder " + root.attributeValue("id") + "-" + root.attributeValue("title"));
				System.err.println(e.getMessage());
			}
			
			// recurse on child elements
			for ( Iterator i = root.elementIterator(); i.hasNext(); ) {
				Element element = (Element) i.next();
				createWorkspaceTree(element, fsFolder);
			}
			if("folder".equals(type)) {
				exportFolderEntries(root, fsFolder);
			}

			try {
				completionFile.createNewFile();
			} catch(IOException e) {
				System.err.println("Could not write Completion file for folder " + root.attributeValue("id") + "-" + root.attributeValue("title"));
				System.err.println("  Restart will export this folder again");
				System.err.println(e.getMessage());
			}
		}
	}
	
	void exportFolderEntries(Element root, File parent)
	throws Exception
	{
		Long id = Long.parseLong(root.attributeValue("id"));
		String xml = (String) fetch("FolderService", "getFolderEntriesAsXML", new Object[] { id }, null, parent);
		Document document = DocumentHelper.parseText(xml);
		for ( Iterator i = document.getRootElement().elementIterator(); i.hasNext(); ) {
			Element element = (Element) i.next();
			exportEntry(element, id, parent);
		}
	}
	
	void exportEntry(Element root, Long folderId, File parent)
	throws Exception
	{
		Long id = Long.parseLong(root.attributeValue("id"));
		File attachments = new File(parent, "Attach-" + safeName(root));
		String xml = (String) fetch("FolderService", "getFolderEntryAsXML", new Object[] { folderId, id, Boolean.TRUE }, null, attachments);
		try {
			File entryFile = new File(parent, safeName(root) + ".xml");
			entryFile.createNewFile();
			FileWriter writer = new FileWriter(entryFile);
			writer.write(xml, 0, xml.length());
			writer.close();
		} catch(IOException e) {
			System.err.println("Could not write entry data for folder " + folderId + ", entry " +
					root.attributeValue("id") + " - " + root.attributeValue("title"));
		}
	}

	
	static String safeName(String name)
	{
		return name.replaceAll("[\\p{Punct}\\p{Space}]", "_");
	}
	
	static String safeName(Element binderElement)
	{
		String title = safeName(binderElement.attributeValue("title"));
		if(title.length() > 32) {
			title = title.substring(0, 32);
		}
		String id = binderElement.attributeValue("id");
		return id + "-" + title;
	}

}