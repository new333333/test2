package com.sitescape.ef.samples.remoting.client.ws.jaxrpc;

import java.rmi.RemoteException;
import javax.xml.rpc.ServiceException;

import com.sitescape.ef.samples.remoting.client.ws.jaxrpc.JaxRpcFacade;
import com.sitescape.ef.samples.remoting.client.ws.jaxrpc.JaxRpcFacadeService;
import com.sitescape.ef.samples.remoting.client.ws.jaxrpc.JaxRpcFacadeServiceLocator;

/**
 * This WS client program uses JAX-RPC compliant client binding classes 
 * generated by Axis' WSDL2Java tool.
 * 
 * @author jong
 *
 */
public class FacadeClient {

	public FacadeClient() {
	}

	public static void main(String[] args) throws ServiceException, RemoteException {

		System.out.println("*** Calling MyGeneratedFacadeClient");

		// first argument - binder id
		// second argument - entry id
		if(args.length < 2) {
			System.out.println("You need to specify a binder id and an entry id");
		}
		else {
			System.out.println("binder id = " + args[0] + ", entry id = " + args[1]);
			int binderId = Integer.parseInt(args[0]);
			int entryId = Integer.parseInt(args[1]);

			// Note: Instead of specifying the wsdd file to the java launch
			// program (see build.xml), we could specify it programmatically
			// by passing config object to the service locator constructor
			// as shown below (which is commented out).

			//EngineConfiguration config = new FileProvider("client_deploy.wsdd");

			JaxRpcFacadeService locator = new JaxRpcFacadeServiceLocator(/*config*/);
			JaxRpcFacade service = locator.getFacade();

			com.sitescape.ef.samples.remoting.client.ws.jaxrpc.Entry entry = 
				service.getEntry(binderId, entryId);

			System.out.println("Entry(" + entry.getBinderId() + "," + entry.getId() + ") - " + entry.getTitle());
		}
	}
}
