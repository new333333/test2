<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:security="http://www.springframework.org/schema/security"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/context/spring-aop-3.0.xsd
    http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.4.xsd">
	    
    <!-- ============================== Pre-authentication using cookie ============================ -->

	<!-- 
		This bean defines a general-purpose pre-authenticated processing filter based on a cookie
		in the HTTP request. In order to provide custom processing around the cookie processing 
		(for example, custom decoding of principal value from the cookie), extend the base class 
		RequestCookiePreAuthenticatedProcessingFilter to override some of the methods, and specify
		the sub-class in the bean definition.
	-->
    <bean id="requestCookiePreAuthenticatedProcessingFilter" class="org.kablink.teaming.asmodule.spring.security.preauth.RequestCookiePreAuthenticatedProcessingFilter">
		<security:custom-filter position="PRE_AUTH_FILTER"/>
		<property name="authenticationManager" ref="_authenticationManager"/>
		<!-- 
			The default value of this property is true with the Spring Security, which allows the filter
		    chain to proceed when an authentication attempt fails with an exception in order to allow
		    other authentication mechanisms to process the request. We set this value to false because
		    we don't want arbitrary error situation raised during the actual authentication for a 
		    pre-authenticated user to lead user to the regular form-based login mask. A good example
		    of this is the situation where the principal extracted from the pre-authenticated cookie
		    does not match any user in the LDAP. In this case, instead of presenting the regular form
		    based login mask to the user, we want the authentication processing to fail so that the
		    user can notice the situation and have the system administrator correct the problem properly.
		    The only cases where we let the filter chain to proceed as normal (so as to allow other
		    authentication mechanisms to process the request) is when the principal returned by 
 			getPreAuthenticatedPrincipal method is null.
		-->
		<property name="continueFilterChainOnUnsuccessfulAuthentication"><value>false</value></property>
		<!--
			The name of the cookie that encodes the principal. The real cookie name must be supplied.
		-->
		<property name="principalRequestCookie"><value>dummy</value></property>
		<property name="noPrincipalCookie"><value>null</value></property>
		<property name="noPrincipal"><value>null</value></property>
		<property name="noCredentialsCookie"><value>empty</value></property>
		<property name="noCredentials"><value>empty</value></property>
    </bean>

    <!-- ============================== Form-based authentication ============================ -->
    
    <bean id="authenticationProcessingFilter" class="org.kablink.teaming.spring.security.AuthenticationProcessingFilter">
    	<security:custom-filter position="AUTHENTICATION_PROCESSING_FILTER" />
		<property name="authenticationManager" ref="_authenticationManager"/>
		<property name="authenticationFailureUrl" value="/a/do?p_name=ss_forum&amp;p_action=1&amp;action=__login"/>
		<property name="defaultTargetUrl" value="/a/"/>
		<property name="filterProcessesUrl" value="/s/portalLogin"/>
		<property name="invalidateSessionOnSuccessfulAuthentication" value="true"/>
		<property name="migrateInvalidatedSessionAttributes" value="false"/>
		<property name="targetUrlResolver" ref="targetUrlResolver" />
    </bean>
  	
    <bean id="_logoutFilter" class="org.kablink.teaming.spring.security.PreAuthenticationLogoutFilter" depends-on="sPropsUtil">
		<security:custom-filter position="LOGOUT_FILTER"/>
		<constructor-arg value="/redirect/vibe?user.logout=true"/>
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.ui.logout.SecurityContextLogoutHandler"/>
			</list>
		</constructor-arg>
		<property name="filterProcessesUrl" value="/s/portalLogout"/>
		<property name="preAuthenticationLogoutSuccessUrl" value="/bitbucket"/>
    </bean>

  	<bean id="targetUrlResolver" class="org.kablink.teaming.spring.security.TargetUrlResolverImpl">
  	</bean>
  	
    <bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.ui.webapp.AuthenticationProcessingFilterEntryPoint">
    	<property name="loginFormUrl" value="/a/do?p_name=ss_forum&amp;p_action=1&amp;action=__login"/>    	
    </bean>
	
    <security:http session-fixation-protection="newSession" entry-point-ref="authenticationProcessingFilterEntryPoint">
        <security:intercept-url pattern="/ws/**" filters="none" />
        <security:intercept-url pattern="/rss/**" filters="none" />
        <security:intercept-url pattern="/ical/**" filters="none" />
        <security:intercept-url pattern="/css/**" filters="none" />
        <security:intercept-url pattern="/ext/**" filters="none" />
        <security:intercept-url pattern="/help/**" filters="none" />
        <security:intercept-url pattern="/help_doc/**" filters="none" />
        <security:intercept-url pattern="/i/**" filters="none" />
        <security:intercept-url pattern="/images/**" filters="none" />
        <security:intercept-url pattern="/js/**" filters="none" />
        <security:intercept-url pattern="/redirect/**" filters="none" />
        <security:intercept-url pattern="/bitbucket/**" filters="none" />
        <security:intercept-url pattern="/html/**" filters="none" />
        
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_REMEMBERED,ROLE_ANONYMOUS" />

        <security:anonymous granted-authority="ROLE_ANONYMOUS" username="guest"  />
                
    </security:http>
    
</beans>
