<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "../dtd/spring-beans.dtd">

<beans>

	<!-- =========================== Basic Infrastructural Beans ========================== -->

	<!-- Configurer that replaces ${...} placeholders with values from ssf 
	     properties file(s) that are accessed through sPropsUtil bean. -->
	<bean id="propertyPlaceholderConfigurer" 
		class="com.sitescape.ef.util.PropertyPlaceholderConfigurer" 
		depends-on="sPropsUtil">	
		<!-- As explained above, this custom configurer gets properties values
		     from SpropsUtil, NOT from the properties file specified below.
		     In other words, the following 'location' property is ignored,
		     but nevertheless present here to satisfy initialization requirement. -->
		<property name="location"><value>config/ssf.properties</value></property>								
	</bean>

	<!-- Message source for this context, loaded from localized "messages_xx" files -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>/WEB-INF/messages/messages</value>
				<value>/WEB-INF/messages/help-messages</value>
			</list>
		</property>	
		<!-- The factory setting for this property is -1, which indicates to cache forever.
		     Change it to a positive number (eg. 1) to enable automatic reloading, which
		     should not be used in a production environment. -->
		<property name="cacheSeconds"><value>5</value></property>									
	</bean>

	<!-- Default View Resolver -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="cache"><value>true</value></property>
		<property name="viewClass"><value>org.springframework.web.servlet.view.JstlView</value></property>
		<property name="prefix"><value>/WEB-INF/jsp/</value></property>
		<property name="suffix"><value>.jsp</value></property>
	</bean>
	<!-- Enable this resolver to provide custimized views
	<bean id="customViewResolver" class="org.springframework.web.servlet.view.XmlViewResolver">
		<property name="order"><value>0</value></property>
		<property name="location"><value>/WEB-INF/views.xml</value></property>
	</bean>
	-->

	<!-- Template for the common dependency injection for controllers -->
	<bean id="controllerDependencyTemplate" lazy-init="true" abstract="true">
		<property name="adminModule"><ref bean="adminModule"/></property>
		<property name="binderModule"><ref bean="binderModule"/></property>
		<property name="definitionModule"><ref bean="definitionModule"/></property>
		<property name="employeeModule"><ref bean="employeeModule"/></property>
		<property name="folderModule"><ref bean="folderModule"/></property>
		<property name="ldapModule"><ref bean="ldapModule"/></property>
		<property name="profileModule"><ref bean="profileModule"/></property>
		<property name="workflowModule"><ref bean="workflowModule"/></property>
		<property name="workspaceModule"><ref bean="workspaceModule"/></property>
		<property name="fileModule"><ref bean="fileModule"/></property>
		<property name="rssGenerator"><ref bean="rssGenerator"/></property>	
	</bean>

	<!-- add support for lobhandler to support hibernate UserType to handle different db clob implementations -->
<!-- 	  <bean id="lobHandler" class="com.sitescape.util.dao.hibernate.FrontbaseLobHandler">
	  </bean>
-->	
	<!-- Default lob handler -->
  	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler">
	</bean>

	<!-- Hibernate session factory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="lobHandler"><ref local="lobHandler"/></property>
		<property name="configLocation"><value>classpath:config/hibernate.cfg.xml</value></property>
		
		<!-- Hibernate properties are loaded from a separate file - hibernate.properties -->
	</bean>
	
	<bean id="hibernateConfiguration" class="com.sitescape.ef.util.HibernateConfigurationFactory">
		<property name="sessionFactoryBean"><ref bean="&amp;sessionFactory"/></property>
	</bean>
	
	<bean id="workflowFactory" class="com.sitescape.ef.module.workflow.impl.WorkflowFactory">
		<property name="hibernateSessionFactory"><ref local="sessionFactory"/></property>
	</bean> 

	<bean id="springContextUtil" class="com.sitescape.ef.util.SpringContextUtil" />

	<bean id="dataSource" class="com.sitescape.ef.util.JndiObjectFactoryBean">
		<property name="jndiName"><value>java:comp/env/jdbc/SiteScapePool</value></property>
	</bean>
  
<!-- oracle only
	<bean id="oracleExtractor" class="org.springframework.jdbc.support.nativejdbc.CommonsDbcpNativeJdbcExtractor">
	</bean>
	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler">
		<property name="nativeJdbcExtractor"><ref local="oracleExtractor"/></property>
	  </bean>
-->

	<bean id="performanceMonitorInterceptor" class="org.springframework.aop.interceptor.PerformanceMonitorInterceptor">
	</bean>
	
	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="dataSource"><ref local="dataSource"/></property>
		<property name="autoStartup"><value>true</value></property>
		<property name="startupDelay"><value>30</value></property>
		<property name="schedulerName"><value>Sitescape</value></property>
		<property name="quartzProperties">
		<props>
			<prop key="org.quartz.threadPool.makeThreadsDaemons">true</prop>
			<prop key="org.quartz.jobStore.tablePrefix">SSQRTZ_</prop>
			<prop key="org.quartz.plugin.triggHistory.class">org.quartz.plugins.history.LoggingJobHistoryPlugin</prop>
			<prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.MSSQLDelegate</prop>
			<prop key="org.quartz.jobStore.selectWithLockSQL">SELECT * FROM {0}LOCKS WITH (UPDLOCK ROWLOCK) WHERE LOCK_NAME = ?</prop>
<!-- 		<prop key="org.quartz.jobStore.driverDelegateClass">com.sitescape.util.dao.quartz.FrontbaseDelegate</prop>
			<prop key="org.quartz.jobStore.selectWithLockSQL">SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ?</prop>
-->
		</props>
		</property>
		<property name="jobListeners">
			<list>
			<bean class="com.sitescape.ef.jobs.CleanupJobListener"/>
			</list>
		</property>
	</bean>

	<!-- Local transaction manager. If using JTA, comment out this element -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory"><ref bean="sessionFactory"/></property>
	</bean>

	<!-- JTA transaction manager. If using local transaction, comment out this element -->	
	<!--<bean id="transactionManager" class="com.sitescape.ef.util.JtaTransactionManager" />-->

	<bean id="baseTransactionProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
			abstract="true">
		<property name="transactionManager"><ref bean="transactionManager"/></property>
		<property name="preInterceptors">
			<list>
				<ref bean="performanceMonitorInterceptor"/>
				<ref bean="indexSynchronizationManagerInterceptor"/>
				<ref bean="userReloadInterceptor"/>
			</list>
		</property>
		<!-- Warning: When used with jta, specified isolation levels are ignored and ISOLATION_DEFAULT is used instead. -->
		<property name="transactionAttributes">
			<props>
				<prop key="add*">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="modify*">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="update*">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="create*">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="set*">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="show*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="index*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>

	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager"><ref bean="transactionManager"/></property>
		<property name="isolationLevelName"><value>ISOLATION_READ_COMMITTED</value></property>
		<property name="propagationBehaviorName"><value>PROPAGATION_REQUIRED</value></property>
	</bean>

	<bean id="userReloadInterceptor" class="com.sitescape.ef.util.aopalliance.UserReloadInterceptor">
		<property name="profileDao"><ref local="profileDao"/></property>
	</bean>
	
	<bean id="modelProcessorManager" class="com.sitescape.ef.modelprocessor.ProcessorManager">
		<property name="config">
			<bean class="com.sitescape.ef.util.DefaultMergeableXmlClassPathConfigFiles">
				<property name="configFiles">
					<list>
						<value>config/model-processor-mapping.xml</value>
					</list>		
				</property>
				<property name="validating"><value>true</value></property>
			</bean>
		</property>
	</bean>
	
	<bean id="nlt" class="com.sitescape.ef.util.NLT"/>
	<bean id="definitionHelper" class="com.sitescape.ef.web.util.DefinitionHelper">
		<property name="definitionModule"><ref bean="definitionModule"/> </property>
	</bean>
	
	<bean id="sPropsUtil" class="com.sitescape.ef.util.SPropsUtil">
		<property name="config">
			<bean class="com.sitescape.ef.util.PropertiesClassPathConfigFiles">
				<property name="configFiles">
					<list>
						<value>config/ssf.properties</value>
						<value>optional:config/ssf-ext.properties</value>
					</list>		
				</property>
			</bean>
		</property>
	</bean>
	<bean id="zoneConfig" class="com.sitescape.ef.util.SZoneConfig">
		<property name="configDocs">
			<bean class="com.sitescape.ef.util.DefaultMergeableXmlClassPathConfigFiles">
				<property name="configFiles">
					<list>
						<value>config/zone.cfg.xml</value>
					</list>		
				</property>
				<property name="validating"><value>false</value></property>
			</bean>
		</property>
	</bean>

	<!-- ========================= Portlet Common Infrastructural Beans ======================== -->
	
	<!-- Portlet Parameter-based Mapping Interceptor -->
	<bean id="portletParameterMappingInterceptor" class="org.springframework.web.portlet.handler.ParameterMappingInterceptor"/>

	<!-- Template for the Portlet Mode - Parameter Handler Mapping Beans -->
	<bean id="portletModeParameterHandlerMappingTemplate" class="org.springframework.web.portlet.handler.PortletModeParameterHandlerMapping" lazy-init="true" abstract="true">
        <property name="order"><value>10</value></property>
		<property name="interceptors">
			<list>
				<ref bean="portletParameterMappingInterceptor"/>
				<!-- Set up request context -->
				<ref bean="portletInitRequestContextInterceptor"/>
				<!-- Enable Open-Session-In-View pattern for Hibernate ORM.
				     This must come before userPreloadInterceptor since it
				     might need to perform DB lookup -->
				<ref bean="portletOpenSessionInViewInterceptor"/>
				<!-- Preload user object for the duration of request -->
				<ref bean="portletUserPreloadInterceptor"/>
			</list>
		</property>
	</bean>

	<!-- Template for the Portlet Mode Handler Mapping Beans -->
	<bean id="portletModeHandlerMappingTemplate" class="org.springframework.web.portlet.handler.PortletModeHandlerMapping" lazy-init="true" abstract="true">
        <property name="order"><value>20</value></property>
		<property name="interceptors">
			<list>
				<ref bean="portletInitRequestContextInterceptor"/>
				<!-- Enable Open-Session-In-View pattern for Hibernate ORM.
				     This must come before userPreloadInterceptor since it
				     might need to perform DB lookup -->
				<ref bean="portletOpenSessionInViewInterceptor"/>
				<!-- Preload user object for the duration of each request -->
				<ref bean="portletUserPreloadInterceptor"/>
			</list>
		</property>
	</bean>

	<!-- Default Exception Handler Bean -->
    <bean id="portletDefaultExceptionHandlerTemplate" class="org.springframework.web.portlet.handler.SimpleMappingExceptionResolver" lazy-init="true" abstract="true">
		<property name="defaultErrorView"><value>common/defError</value></property>
		<property name="exceptionMappings">
			<props>
				<prop key="com.sitescape.ef.module.file.WriteFilesException">error/fileUploadError</prop>
				<prop key="com.sitescape.ef.exception.CheckedCodedException">common/defCodedError</prop>
				<prop key="com.sitescape.ef.exception.UncheckedCodedException">common/defCodedError</prop>
				<prop key="javax.portlet.PortletSecurityException">common/notAuthorized</prop>
				<prop key="javax.portlet.UnavailableException">common/notAvailable</prop>
			</props>
		</property>  
	</bean>

	<!-- Used for open-session-in-view pattern -->
	<bean id="portletOpenSessionInViewInterceptor" class="com.sitescape.ef.web.portlet.handler.OpenSessionInViewInterceptor">
		<property name="sessionFactory"><ref bean="sessionFactory"/></property>
	</bean>
	
	<bean id="portletInitRequestContextInterceptor" class="com.sitescape.ef.web.portlet.handler.InitRequestContextInterceptor"/>
		
	<bean id="portletUserPreloadInterceptor" class="com.sitescape.ef.web.portlet.handler.UserPreloadInterceptor">
		<property name="profileDao"><ref local="profileDao"/></property>
	</bean>	

	<!-- ============================ Indexing/Search Service =========================== -->
	
	<bean id="luceneSessionFactory" class = "com.sitescape.ef.search.local.LocalLuceneSessionFactory" depends-on="sPropsUtil">
		<property name="indexRootDir"><value>${data.root.dir}/lucene</value></property>
	</bean>
	
	<bean id="objectIndexMapping" class = "com.sitescape.ef.search.docbuilder.mapped.ObjectIndexMapping">
		<property name="mappingFilePath"><value>config/object-index-mapping.xml</value></property>
	</bean>
	
	<bean id="indexSynchronizationManager" class="com.sitescape.ef.search.IndexSynchronizationManager">
		<property name="luceneSessionFactory"><ref local="luceneSessionFactory"/></property>
	</bean>
	
	<bean id="mappedIndexDocumentBuilder" class="com.sitescape.ef.search.docbuilder.mapped.MappedIndexDocumentBuilder">
		<property name="objectIndexMapping"><ref local="objectIndexMapping"/></property>		
	</bean>

	<bean id="indexSynchronizationManagerInterceptor" class="com.sitescape.ef.search.interceptor.IndexSynchronizationManagerInterceptor">
	</bean>	
	
	<!-- ============================== Document Converter ============================ -->
	
    <bean id="docConverter" class="com.sitescape.ef.docconverter.DocConverter">
        <property name="configFileName"><value>config/docconverter.cfg</value></property>
        <property name="nullTransform"><value>config/null.xslt</value></property>
    </bean>

	<!-- ============================== RSS Generator ============================ -->
	
    <bean id="rssGenerator" class="com.sitescape.ef.rss.RssGenerator">
    	<property name="rssRootDir"><value>${data.root.dir}/rss</value></property>
    </bean>
	
	<!-- ================================ Security Service =============================== -->
	
	<bean id="accessControlManager" class="com.sitescape.ef.security.impl.AccessControlManagerImpl">
		<property name="functionManager"><ref local="functionManager"/></property>
		<property name="workAreaFunctionMembershipManager"><ref local="workAreaFunctionMembershipManager"/></property>
	</bean>
	<!--<bean id="accessControlManager" class="com.sitescape.ef.security.impl.NullAccessControlManager">
	</bean>
	-->
	
	<bean id="aclManager" class="com.sitescape.ef.security.acl.impl.AclManagerImpl">
	</bean>

	<bean id="functionManager" class="com.sitescape.ef.security.function.FunctionManagerImpl">
		<property name="securityDao"><ref local="securityDao"/></property>
	</bean>

	<bean id="workAreaFunctionMembershipManager" class="com.sitescape.ef.security.function.WorkAreaFunctionMembershipManagerImpl">
		<property name="securityDao"><ref local="securityDao"/></property>		
	</bean>
	
	<bean id="securityDao" class="com.sitescape.ef.security.dao.SecurityDaoImpl">
		<property name="sessionFactory"><ref bean="sessionFactory"/></property>
	</bean>
	
	<bean id="authenticationManager" parent="baseTransactionProxy">
		<property name="transactionAttributes">
			<props>
				<prop key="authenticate">PROPAGATION_REQUIRES_NEW,ISOLATION_READ_COMMITTED</prop>
			</props>
		</property>
			<property name="target">
				<bean class="com.sitescape.ef.security.authentication.impl.AuthenticationManagerImpl">
					<property name="profileDao"><ref local="profileDao"/></property>						
				</bean>
			</property>				
	</bean>	
	
	<!-- ============================ Document Pipeline =========================== -->
	
	<bean id="docPipeline" class="com.sitescape.ef.pipeline.impl.SynchronousPipeline">
		<!-- Do not share same instances -->
		<property name="conduitFactories">
			<list>
				<!--<bean class="com.sitescape.ef.pipeline.impl.RAMConduitFactory"/>
				<bean class="com.sitescape.ef.pipeline.impl.RAMConduitFactory"/>-->
			</list>
		</property>
		<!-- Do not share same instances -->
		<property name="docHandlers">
			<list>
				<!--<bean class="com.sitescape.ef.pipeline.impl.NullDocHandler">
					<property name="name"><value>First Handler</value></property>
				</bean>
				<bean class="com.sitescape.ef.pipeline.impl.NullDocHandler">
					<property name="name"><value>Second Handler</value></property>
				</bean>
				<bean class="com.sitescape.ef.pipeline.impl.NullDocHandler">
					<property name="name"><value>Third Handler</value></property>
				</bean>-->
				<bean class="com.sitescape.ef.docconverter.pipeline.DocConverterHandler">
					<property name="name"><value>Doc Converter</value></property>
					<property name="docConverter"><ref local="docConverter"/></property>
					<property name="timeout"><value>20000</value></property>
				</bean>
			</list>
		</property>
	</bean>
	
	<!--<bean id="BasicConduitFactory" class="com.sitescape.ef.pipeline.impl.RAMConduitFactory"/>-->
	
	<!-- =========================== Business Components =========================== -->
	
	<!-- Template for the common dependency injection for modules.
	     This includes DAO components and a variety of other services and managers 
	     that are commonly used by modules. 
	     
	     IMPORTANT: Do NOT ever add module components to this template, since it 
	     can cause circular dependencies among modules! Instead, dependent modules 
	     must be specified under respective module bean declarations.  -->
	     
	<bean id="moduleDependencyTemplate" abstract="true">
		<property name="coreDao"><ref local="coreDao"/></property>
		<property name="folderDao"><ref local="folderDao"/></property>
		<property name="profileDao"><ref local="profileDao"/></property>
		<property name="functionManager"><ref bean="functionManager"/></property>	
		<property name="accessControlManager"><ref local="accessControlManager"/></property>
		<property name="aclManager"><ref local="aclManager"/></property>
		<property name="scheduler"><ref local="scheduler"/></property>
		<property name="processorManager"><ref local="modelProcessorManager"/></property>
		<property name="luceneSessionFactory"><ref local="luceneSessionFactory"/></property>
		<property name="workAreaFunctionMembershipManager"><ref local="workAreaFunctionMembershipManager"/></property>
		<property name="rssGenerator"><ref local="rssGenerator"/></property>
	</bean>
	
	<bean id="employeeModule" parent="moduleDependencyTemplate" class="com.sitescape.ef.module.sample.impl.EmployeeModuleImpl">
	</bean>
	
	<bean id="workspaceModule" parent="baseTransactionProxy">
		<property name="target">
			<bean parent="moduleDependencyTemplate" class="com.sitescape.ef.module.workspace.impl.WorkspaceModuleImpl">
				<property name="definitionModule"><ref local="definitionModule"/></property>
			</bean>
		</property>
	</bean>

	

	<bean id="adminModule" parent="baseTransactionProxy">
		<property name="target">
			<bean parent="moduleDependencyTemplate" class="com.sitescape.ef.module.admin.impl.AdminModuleImpl">
				<property name="mailManager"><ref local="mailManager"/></property>
			</bean>
		</property>
	</bean>


	<bean id="folderModule" parent="baseTransactionProxy">
		<property name="target">
			<bean parent="moduleDependencyTemplate" class="com.sitescape.ef.module.folder.impl.FolderModuleImpl">
				<property name="definitionModule"><ref local="definitionModule"/></property>
				<property name="fileModule"><ref local="fileModule"/></property>
				<property name="profileModule"><ref local="profileModule"/></property>
			</bean>
		</property>
		<!-- addEntry, addReply, modifyEntry provide transaction semantics at a finer
		granularity then the method. Handled by processor through transactionTemplate-->
		<property name="transactionAttributes">
			<props>
				<prop key="addFolder">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="modifyWorkflowState">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="addSubscription">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="modifySubscription">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="deleteSubscription">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="deleteEntry">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="moveEntry">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="set*">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="show*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="index*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>

	<bean id="profileModule" parent="baseTransactionProxy">
		<property name="target">
			<bean parent="moduleDependencyTemplate" class="com.sitescape.ef.module.profile.impl.ProfileModuleImpl">
				<property name="definitionModule"><ref bean="definitionModule"/></property>
			</bean>
		</property>
		<!-- addUser, addGroup, addWorkspace, modifyEntry provide transaction semantics at a finer
		granularity then the method. Handled by processor through transactionTemplate-->
		<property name="transactionAttributes">
			<props>
				<prop key="addProfileBinder">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="modifyWorkflowState">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="deleteEntry">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="set*">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="show*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="index*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>

	<bean id="defaultWorkspaceCoreProcessor" parent="moduleDependencyTemplate" class="com.sitescape.ef.module.workspace.impl.DefaultWorkspaceCoreProcessor">
		<property name="transactionTemplate"><ref local="transactionTemplate"/></property>
		<property name="definitionModule"><ref local="definitionModule"/></property>
		<property name="workflowModule"><ref local="workflowModule"/></property>
		<property name="fileModule"><ref local="fileModule"/></property>
		<property name="pipeline"><ref local="docPipeline"/></property>
	</bean>

	<bean id="defaultFolderCoreProcessor" parent="moduleDependencyTemplate" class="com.sitescape.ef.module.folder.impl.DefaultFolderCoreProcessor">
		<property name="transactionTemplate"><ref local="transactionTemplate"/></property>
		<property name="definitionModule"><ref local="definitionModule"/></property>
		<property name="workflowModule"><ref local="workflowModule"/></property>
		<property name="fileModule"><ref local="fileModule"/></property>
		<property name="pipeline"><ref local="docPipeline"/></property>
	</bean>

	<bean id="defaultFileFolderCoreProcessor" parent="moduleDependencyTemplate" class="com.sitescape.ef.module.folder.impl.DefaultFileFolderCoreProcessor">
		<property name="transactionTemplate"><ref local="transactionTemplate"/></property>
		<property name="definitionModule"><ref local="definitionModule"/></property>
		<property name="workflowModule"><ref local="workflowModule"/></property>
		<property name="fileModule"><ref local="fileModule"/></property>
		<property name="pipeline"><ref local="docPipeline"/></property>
	</bean>

	<bean id="defaultProfileCoreProcessor" parent="moduleDependencyTemplate" class="com.sitescape.ef.module.profile.impl.DefaultProfileCoreProcessor">
		<property name="transactionTemplate"><ref local="transactionTemplate"/></property>
		<property name="definitionModule"><ref local="definitionModule"/></property>
		<property name="workflowModule"><ref local="workflowModule"/></property>
		<property name="fileModule"><ref local="fileModule"/></property>
		<property name="pipeline"><ref local="docPipeline"/></property>
	</bean>

	<bean id="binderModule" parent="baseTransactionProxy">
		<property name="target">
			<bean parent="moduleDependencyTemplate" class="com.sitescape.ef.module.binder.impl.BinderModuleImpl">
				<property name="definitionModule"><ref local="definitionModule"/></property>
				<property name="profileModule"><ref local="profileModule"/></property>
			</bean>
		</property>
		<!-- modifyBinder provide transaction semantics at a finer
		granularity then the method. Handled by processor through transactionTemplate-->
		<property name="transactionAttributes">
			<props>
				<prop key="deleteBinder">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="moveBinder">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="deleteConfiguration">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="modifyConfiguration">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="addSubscription">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="deleteSubscription">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="modifySubscription">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="add*">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="create*">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="set*">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="show*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="index*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>

	<bean id="binderAccessUtils" class="com.sitescape.ef.module.binder.AccessUtils">
		<property name="accessControlManager"><ref bean="accessControlManager"/> </property>
	</bean>

	<bean id="definitionModule" parent="baseTransactionProxy">
		<property name="target">
			<bean parent="moduleDependencyTemplate" class="com.sitescape.ef.module.definition.impl.DefinitionModuleImpl">
				<property name="workflowModule"><ref local="workflowModule"/></property>
				<property name="definitionBuilderConfig">
					<bean class="com.sitescape.ef.util.DefaultMergeableXmlClassPathConfigFiles">
						<property name="configFiles">
							<list>
								<value>config/definition_builder_config.xml</value>
							</list>		
						</property>
						<!-- TODO: We must use validation! -->
						<property name="validating"><value>true</value></property>
					</bean>
				</property>		
			</bean>	
		</property>
	</bean>

	<bean id="defaultFolderEmailFormatter" parent="moduleDependencyTemplate" class="com.sitescape.ef.mail.impl.DefaultFolderEmailFormatter">
		<property name="definitionModule"><ref local="definitionModule"/></property>
		<property name="folderModule"><ref local="folderModule"/></property>
		<property name="mailManager"><ref local="mailManager"/></property>
	</bean>
	
	<bean id="ldapModule"  parent="baseTransactionProxy">
		<property name="target">
			<bean parent="moduleDependencyTemplate" class="com.sitescape.ef.module.ldap.impl.LdapModuleImpl">
				<property name="transactionTemplate"><ref local="transactionTemplate"/></property>
				<property name="profileModule"><ref local="profileModule"/></property>
			</bean>
		</property>
		<!-- synchronize methods handled by processor through transactionTemplate-->
		<property name="transactionAttributes">
			<props>
				<prop key="set*">PROPAGATION_REQUIRED,ISOLATION_READ_COMMITTED</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>		
		
	<bean id="workflowModule" parent="baseTransactionProxy" depends-on="zoneConfig, scheduler, workflowFactory" >
		<property name="target">
			<bean parent="moduleDependencyTemplate" class="com.sitescape.ef.module.workflow.impl.WorkflowModuleImpl" depends-on="zoneConfig, scheduler, workflowFactory" init-method="init">
			</bean>
		</property>
	</bean>	

	<bean id="fileModule" class="com.sitescape.ef.module.file.impl.FileModuleImpl">
		<property name="transactionTemplate"><ref local="transactionTemplate"/></property>
		<property name="coreDao"><ref local="coreDao"/></property>		
		<property name="folderDao"><ref local="folderDao"/></property>		
		<property name="contentFilter">
			<bean class="com.sitescape.ef.module.file.impl.VirusScanningFilter"/>
		</property>			
		<!-- valid values are DELETE and MOVE -->
		<property name="failedFilterFile"><value>DELETE</value></property>
		<!-- valid values are CONTINUE and ABORT -->
		<property name="failedFilterTransaction"><value>CONTINUE</value></property>
	</bean>

	<bean id="dashboardHelper" class="com.sitescape.ef.web.util.DashboardHelper">
		<property name="folderModule"><ref local="folderModule"/></property>
		<property name="binderModule"><ref local="binderModule"/></property>
		<property name="definitionModule"><ref local="definitionModule"/></property>
		<property name="profileModule"><ref local="profileModule"/></property>
		<property name="workspaceModule"><ref local="workspaceModule"/></property>
	</bean>	
		
	<bean id="ssfs" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="com.sitescape.ef.ssfs.server.impl.SiteScapeFileSystemImpl">
				<property name="folderModule"><ref local="folderModule"/></property>
				<property name="definitionModule"><ref local="definitionModule"/></property>
				<property name="binderModule"><ref local="binderModule"/></property>
				<property name="profileModule"><ref local="profileModule"/></property>
				<property name="fileModule"><ref local="fileModule"/></property>
				<property name="workspaceModule"><ref local="workspaceModule"/></property>
				<property name="mimeTypes"><ref local="mimeTypes"/></property>
			</bean>
		</property>
		<property name="proxyInterfaces">
			<value>com.sitescape.ef.ssfs.server.SiteScapeFileSystem</value>
		</property>
		<property name="interceptorNames">
			<list>
				<!-- Setting up of request context is done by the cross-context
				     dispatcher server/servlet. The same servlet also takes care
				     of logging. -->
				<value>aopallianceOpenSessionInViewInterceptor</value>
				<value>aopallianceUserPreloadInterceptor</value>
				<value>aopallianceMethodInvocationTraceInterceptor</value>
			</list>
		</property>
	</bean>
	
	<bean id="wsFacade" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean class="com.sitescape.ef.remoting.ws.FacadeImpl">
				<property name="folderModule"><ref local="folderModule"/></property>
				<property name="definitionModule"><ref local="definitionModule"/></property>
				<property name="binderModule"><ref local="binderModule"/></property>
				<property name="profileModule"><ref local="profileModule"/></property>
			</bean>
		</property>
		<property name="proxyInterfaces">
			<value>com.sitescape.ef.remoting.api.Facade</value>
		</property>
		<property name="interceptorNames">
			<list>
				<value>aopallianceLoggingInterceptor</value>
				<!-- When a user request is served, typically one of the very first 
				     interceptors we define is one that sets up request context for 
				     the serving thread. In the case of Web request, typically this
				     information comes from either the request object or the session
				     and the interceptor sets up thread context using the user 
				     information. However, in the case Web Service, neither request
				     object nor session is relevant. The same piece of information
				     (i.e., zone and user names) must come from the WS framework. 
				     Specifically, when used in conjunction with WS-Security compliant
				     tool such as WSS4J, the hook is provided via a callback routine
				     that the framework invokes to obtain password information for
				     the user making the request. That's where we set up our request 
				     context as well. -->
				<value>aopallianceOpenSessionInViewInterceptor</value>
				<value>aopallianceUserPreloadInterceptor</value>
			</list>
		</property>
	</bean>
	
	<bean id="aopallianceLoggingInterceptor" class="com.sitescape.ef.util.aopalliance.LoggingInterceptor"/>
	
	<bean id="aopallianceOpenSessionInViewInterceptor" class="com.sitescape.ef.util.aopalliance.OpenSessionInViewInterceptor">
		<property name="sessionFactory"><ref local="sessionFactory"/></property>
	</bean>
	
	<bean id="aopallianceUserPreloadInterceptor" class="com.sitescape.ef.util.aopalliance.UserPreloadInterceptor">
		<property name="profileDao"><ref local="profileDao"/></property>
	</bean>
	
	<bean id="aopallianceMethodInvocationTraceInterceptor" class="com.sitescape.ef.util.aopalliance.MethodInvocationTraceInterceptor"/>
	
	<!-- referenced internally when viewing files and sending mail -->
	<bean id="mimeTypes" class="org.springframework.mail.javamail.ConfigurableMimeFileTypeMap"/>
		
	<!-- =========================Portlet support =========================================================== -->	

	<!-- ========================= Data Access (DAO) Components ====================== -->
	
	<bean id="coreDao" class="com.sitescape.ef.dao.impl.CoreDaoImpl">
		<property name="sessionFactory"><ref bean="sessionFactory"/></property>
	</bean>
	<bean id="folderDao" class="com.sitescape.ef.dao.impl.FolderDaoImpl">
		<property name="sessionFactory"><ref bean="sessionFactory"/></property>
		<property name="coreDao"><ref local="coreDao"/></property>
	</bean>
	<bean id="profileDao" class="com.sitescape.ef.dao.impl.ProfileDaoImpl">
		<property name="sessionFactory"><ref bean="sessionFactory"/></property>
		<property name="coreDao"><ref local="coreDao"/></property>
	</bean>

	<!-- ======================== File & Repository Services ====================== -->
	
	<bean id="fileRepositoryService" class="com.sitescape.ef.repository.file.FileRepositorySessionFactory" 
		depends-on="sPropsUtil" init-method="initialize" destroy-method="shutdown">
		<property name="repositoryRootDir"><value>${data.root.dir}/filerepository</value></property>
	</bean>

	<bean id="internalWebdavRepositoryService" class="com.sitescape.ef.repository.webdav.WebdavRepositorySessionFactory"
		init-method="initialize" destroy-method="shutdown">
		<property name="hostUrl"><value>${webdav.repository.hosturl}</value></property>
		<property name="contextPath"><value>${webdav.repository.context.path}</value></property>
		<property name="docRootPath"><value>${webdav.repository.document.root.path}</value></property>
		<property name="username"><value>${webdav.repository.username}</value></property>
		<property name="password"><value>${webdav.repository.password}</value></property>
		<property name="versionDeletionAllowed"><value>false</value></property>
	</bean>
	
	<bean id="jackrabbitRepository" class="com.sitescape.ef.repository.jcr.jackrabbit.JCRRepositorySessionFactory"
		init-method="initialize" destroy-method="shutdown">	
		<property name="fileTypeMap"><ref local="mimeTypes"/></property>
		<property name="repositoryRootDir"><value>${data.root.dir}/jackrabbit</value></property>
		<property name="homeSubdirName"><value>home</value></property>
		<property name="configFileName"><value>jackrabbit-repository.xml</value></property>
		<property name="initializeOnStartup"><value>false</value></property>
		<property name="username"><value>none</value></property>
		<property name="password"><value>none</value></property>
		<property name="versionDeletionAllowed"><value>true</value></property>
	</bean>
	
	<!-- ================================ Presence Service =============================== -->
	<bean id="presenceService" class="com.sitescape.ef.presence.impl.PresenceServiceImpl">
		<property name="jabberServer"><value>${presence.service.jabber.server}</value></property>
		<property name="jabberServerPort"><value>${presence.service.jabber.server.port}</value></property>
		<property name="enable"><value>${presence.service.enable}</value></property>
	</bean>
	<bean id="presenceBroker" class="com.sitescape.ef.presence.impl.PresenceBrokerImpl">
		<property name="adminId"><value>${presence.broker.admin.id}</value></property>
		<property name="adminPasswd"><value>${presence.broker.admin.passwd}</value></property>
		<property name="zonUrl"><value>${presence.broker.zon.url}</value></property>
		<property name="jabberDomain"><value>${presence.broker.jabber.domain}</value></property>
		<property name="defaultCommunityId"><value>${presence.broker.default.community.id}</value></property>
	</bean>
	<!-- ================================  Mail Support =============================== -->
	<!-- this bean is only used to allow setting of initial context properties -->
	<bean id="mailJndiAccessor" class="org.springframework.jndi.JndiAccessor"/>
	<bean id="mailSender" class="com.sitescape.ef.mail.impl.JavaMailSenderImpl">
		<property name="defaultEncoding"><value>utf-8</value></property>
		<property name="defaultFileTypeMap"><ref local="mimeTypes"/></property>
	</bean>


	<bean id="mailManager" parent="moduleDependencyTemplate" class="com.sitescape.ef.mail.impl.MailManagerImpl">
		<property name="mailSender"><ref local="mailSender"/></property>
		<property name="jndiAccessor"><ref local="mailJndiAccessor"/></property>
		<property name="mailRootDir"><value>${data.root.dir}/mail</value></property>
	</bean>	
	
	<!-- ================================  JMX/MBean Support =============================== -->
	<bean id="exporter" class="org.springframework.jmx.export.MBeanExporter">
	    <property name="beans">
	      <map>
	        <entry key="sitescape:name=presenceService">
	          <ref local="presenceService"/>
	        </entry>
	        <entry key="sitescape:name=hibernateStatisticsService">
	          <ref local="hibernateStatisticsService"/>
	        </entry>
	      </map>
	    </property>
	    <property name="assembler">
	      <bean class="org.springframework.jmx.export.assembler.MethodNameBasedMBeanInfoAssembler">
	      	<property name="methodMappings">
	      		<map>
	      			<entry key="sitescape:name=presenceService"><value>getJabberServer,getJabberServerPort,getEnable</value></entry>
	      		</map>
	      	</property>
	      </bean>
	    </property>
	</bean>

	<bean id="hibernateStatisticsService" class="org.hibernate.jmx.StatisticsService">
		<property name="sessionFactory"><ref local="sessionFactory"/></property>
	</bean>
	
</beans>
